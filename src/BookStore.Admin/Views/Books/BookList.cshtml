@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@{
}
<div class="container-fluid">

    <!-- Page Heading -->
    <h1 class="h3 mb-2 text-gray-800">Tables</h1>
    <!-- DataTales Example -->
    <div class="card">
        <div class="card-header d-flex justify-content-between align-items-center position-relative">
            <div class="iq-header-title">
                <h4 class="mb-0">Book Lists</h4>
            </div>
            <div class="iq-card-header-toolbar d-flex align-items-center">
                <a asp-controller="Books" asp-action="CreateBook" class="btn btn-primary view-more">Add New Book</a>
            </div>
        </div>
        <div class="card-body">
            <div class="table-responsive">
                <table class="table table-bordered" id="bookTable" width="100%" cellspacing="0">
                    <thead>
                        <tr>
                            <th>No</th>
                            <th>Book Image</th>
                            <th>Name</th>
                            <th>Author</th>
                            <th>Price</th>
                            <th>Mô tả Ngắn</th>
                            <th>Mô tả chi tiết</th>
                            <th>Factory</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                </table>
            </div>
        </div>
    </div>
</div>

<!-- Delete Confirmation Modal -->
<div class="modal fade" id="deleteModal" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteModalLabel">Confirm Delete</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                Are you sure you want to delete this book?
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" id="confirmDelete">Delete</button>
            </div>
        </div>
    </div>
</div>
<!-- Edit Modal -->
<div class="modal" id="editModal" tabindex="-1" aria-labelledby="editModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg animated--grow-in">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editModalLabel">Edit Book</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <!-- Edit form content -->
                <form id="editForm">
                    <input type="hidden" id="editBookId" />

                    <!-- Book Name -->
                    <div class="form-group">
                        <label for="bookName">Name</label>
                        <input type="text" class="form-control" id="bookName" required />
                    </div>

                    <!-- Author -->
                    <div class="form-group">
                        <label for="bookAuthor">Author</label>
                        <input type="text" class="form-control" id="bookAuthor" required />
                    </div>

                    <!-- Short Description -->
                    <div class="form-group">
                        <label for="bookShortDesc">Short Description</label>
                        <input type="text" class="form-control" id="bookShortDesc" />
                    </div>

                    <!-- Detailed Description -->
                    <div class="form-group">
                        <label for="bookDetailDesc">Detail Description</label>
                        <textarea class="form-control" id="bookDetailDesc" rows="3"></textarea>
                    </div>

                    <!-- Price -->
                    <div class="form-group">
                        <label for="bookPrice">Price</label>
                        <input type="number" class="form-control" id="bookPrice" step="0.01" required />
                    </div>

                    <div class="form-group">
                        <label for="bookImage">Book's Image</label>
                        <img id="bookImage" style="width: 150px; height: 150px; object-fit: cover;"/>
                    </div>

                    <!-- Factory -->
                    <div class="form-group">
                        <label for="bookFactory">Factory</label>
                        <input type="text" class="form-control" id="bookFactory" />
                    </div>

                    <!-- Discount -->
                    <div class="form-group">
                        <label for="bookDiscount">Discount (%)</label>
                        <input type="number" class="form-control" id="bookDiscount" min="0" max="100" />
                    </div>

                    <div class="form-group">
                        <label>Categories</label>
                        <div id="categoryBadges">
                            <!-- Badges will be populated by JavaScript -->
                        </div>
                    </div>

                    <button type="button" class="btn btn-primary" id="saveEdit">Save changes</button>
                </form>
            </div>
        </div>
    </div>
</div>

<!-- /.container-fluid -->
@section Scripts {
    <script>
        let selectedBookId;
        let selectedCategoryIds = [];
        $(document).ready(() => {
            $('#bookTable').DataTable({
                "processing": true,
                "serverSide": true,
                "searching": true,
                "paging": true,
                "responsive": true,
                "pageLength": 10,
                "lengthMenu": [5, 10, 25, 50],
                "ajax": {
                    "url": '@Url.Action("GetProducts", "Books")',
                    "type": "GET",
                    "data": function (d) {
                        d.searchValue = d.search.value;
                    }
                },
                "columns": [
                    { "data": "id" },
                    {
                        "data": "image",
                        "render": function (data, type, row) {
                            return '<img src="' + data + '" alt="Book Image" style="width:150px;height:150px;object-fit:contain"/>';
                        }
                    },
                    { "data": "name" },
                    { "data": "author" },
                    {
                        "data": "price", "render": function (data, type, row) {
                            if (type === 'display' || type === 'filter') {
                                return new Intl.NumberFormat('vi-VN', {
                                    style: 'currency',
                                    currency: 'VND',
                                    minimumFractionDigits: 0
                                }).format(data);
                            }
                            return data;
                        }
                    },
                    { "data": "shortDesc" },
                    { 
                        "data": "detailDesc",
                        "createdCell": function (cell, cellData, rowData, rowIndex, colIndex) {
                            if (cellData) {
                                $(cell).addClass('description-column');
                            }
                        },
                    },
                    { "data": "factory" },
                    {
                        "data": null,
                        "render": function (data, type, row) {
                            return `
                            <div class="user-action">
                                <a class="bg-success btn btn-primary btn-sm d-flex align-items-center justify-content-center" onclick="updateBook(${row.id})">
                                    <i class="fa fa-pen"></i>
                                </a>
                                <a class="bg-danger btn btn-danger btn-sm d-flex align-items-center justify-content-center" onclick="deleteBook(${row.id})">
                                    <i class="fa fa-trash"></i>
                                </a>
                            </div>
                                `;
                        },
                        "orderable": false // Make this column non-sortable
                    }
                ],
                "order": [[0, "asc"]] // Order by the first column (Id) ascending by default
            });
        });

        // Delete button event handler
        function deleteBook(id) {
            selectedBookId = id;
            console.log(selectedBookId);
            $('#deleteModal').modal('show');
        }

        $('#confirmDelete').click(() => {
            $.ajax({
                url: '@Url.Action("Delete", "Books")',
                type: 'POST',
                data: {bookId: selectedBookId},
                success: function (response) {
                    if (response.success) {
                        $('#deleteModal').modal('hide');
                        toastr.success("Book deleted successfully.");
                        $('#bookTable').DataTable().ajax.reload(); // Reload table data
                    } else {
                        toastr.error("An error occurred while deleting the book.");
                    }
                },
                error: function () {
                    toastr.error("An error occurred while deleting the book.");
                }
            });
        });

        // Edit button event handler
        function updateBook(id) {
            selectedBookId = id;
            $.ajax({
                url: `/Books/GetBook/${selectedBookId}`,
                type: "GET",
                success: function (data) {
                    $("#editBookId").val(data.id);
                    $("#bookName").val(data.name);
                    $("#bookAuthor").val(data.author);
                    $("#bookShortDesc").val(data.shortDesc);
                    $("#bookDetailDesc").val(data.detailDesc);
                    $("#bookPrice").val(data.price);
                    $("#bookImage").attr('src', data.image);
                    $("#bookFactory").val(data.factory);
                    $("#bookDiscount").val(data.discount);

                    $("#categoryBadges").empty(); // Clear existing badges
                    const selectedCategoryIds = data.categoryIds; // Assume this array has the selected categories
                    $.each(data.allCategories, function (index, category) {
                        const isSelected = selectedCategoryIds.includes(category.id);
                        const badgeClass = isSelected ? "badge-primary" : "badge-secondary";

                        // Append badge with toggle functionality
                        $("#categoryBadges").append(`
                                    <span class="badge ${badgeClass} m-1 category-badge" data-id="${category.id}" style="cursor:pointer;">
                                        ${category.name}
                                    </span>
                                `);
                    });

                    // Show the modal
                    $("#editModal").modal("show");
                },
                error: function () {
                    toastr.error("Error loading book data");
                }
            });
        }

        $(document).on("click", ".category-badge", function () {
            const categoryId = $(this).data("id");

            // Toggle selection state
            if (selectedCategoryIds.includes(categoryId)) {
                // Untag category
                selectedCategoryIds = selectedCategoryIds.filter(id => id !== categoryId);
                $(this).removeClass("badge-primary").addClass("badge-secondary");
            } else {
                // Tag category
                selectedCategoryIds.push(categoryId);
                $(this).removeClass("badge-secondary").addClass("badge-primary");
            }
        });

        // Save Edit action
        $("#saveEdit").on("click", function () {
            const categoryIds = $("input[name='CategoryIds']:checked").map(function () {
                return $(this).val();
            }).get();

            const bookData = {
                Id: $("#editBookId").val(),
                Name: $("#bookName").val(),
                Author: $("#bookAuthor").val(),
                ShortDesc: $("#bookShortDesc").val(),
                DetailDesc: $("#bookDetailDesc").val(),
                Price: $("#bookPrice").val(),
                Quantity: $("#bookQuantity").val(),
                Sold: $("#bookSold").val(),
                Image: $("#bookImage").val(),
                Factory: $("#bookFactory").val(),
                Discount: $("#bookDiscount").val(),
                CategoryIds: selectedCategoryIds
            };

            $.ajax({
                url: "/Books/EditBook",
                type: "POST",
                data: JSON.stringify(bookData),
                contentType: "application/json",
                success: function () {
                    toastr.success("Book updated successfully!");
                    $("#editModal").modal("hide");
                    $('#bookTable').DataTable().ajax.reload();
                },
                error: function () {
                    toastr.error("Error updating book");
                }
            });
        });
    </script>
}