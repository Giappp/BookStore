// <auto-generated />
using System;
using BookStore.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BookStore.Infrastructure.Migrations
{
    [DbContext(typeof(BookStoreDbContext))]
    [Migration("20241029040050_update-patch-2")]
    partial class updatepatch2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.35")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("BookCategory", b =>
                {
                    b.Property<long>("BookId")
                        .HasColumnType("bigint")
                        .HasColumnName("book_id");

                    b.Property<long>("CategoryId")
                        .HasColumnType("bigint")
                        .HasColumnName("category_id");

                    b.HasKey("BookId", "CategoryId")
                        .HasName("PK__book_cat__1459F47AB0EFE0DB");

                    b.HasIndex("CategoryId");

                    b.ToTable("book_categories", (string)null);

                    b.HasData(
                        new
                        {
                            BookId = 1L,
                            CategoryId = 1L
                        },
                        new
                        {
                            BookId = 2L,
                            CategoryId = 2L
                        },
                        new
                        {
                            BookId = 3L,
                            CategoryId = 3L
                        },
                        new
                        {
                            BookId = 4L,
                            CategoryId = 4L
                        },
                        new
                        {
                            BookId = 5L,
                            CategoryId = 5L
                        },
                        new
                        {
                            BookId = 6L,
                            CategoryId = 2L
                        },
                        new
                        {
                            BookId = 7L,
                            CategoryId = 1L
                        },
                        new
                        {
                            BookId = 8L,
                            CategoryId = 4L
                        },
                        new
                        {
                            BookId = 9L,
                            CategoryId = 3L
                        },
                        new
                        {
                            BookId = 10L,
                            CategoryId = 5L
                        });
                });

            modelBuilder.Entity("BookStore.Domain.Entities.Book", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("author");

                    b.Property<string>("DetailDesc")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("detail_desc");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(5,2)")
                        .HasColumnName("discount");

                    b.Property<string>("Factory")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("factory");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("image");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("price");

                    b.Property<long>("Quantity")
                        .HasColumnType("bigint")
                        .HasColumnName("quantity");

                    b.Property<string>("ShortDesc")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("short_desc");

                    b.Property<long?>("Sold")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnName("sold");

                    b.HasKey("Id")
                        .HasName("PK__books__3213E83F4C89C83B");

                    b.ToTable("books", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Author = "Frank Herbert",
                            DetailDesc = "A science fiction novel set in a distant future",
                            Discount = 0.10m,
                            Factory = "Chilton Books",
                            Image = "dune.jpg",
                            Name = "Dune",
                            Price = 19.99m,
                            Quantity = 100L,
                            ShortDesc = "Classic Sci-Fi",
                            Sold = 10L
                        },
                        new
                        {
                            Id = 2L,
                            Author = "J.R.R. Tolkien",
                            DetailDesc = "A fantasy adventure of Bilbo Baggins",
                            Discount = 0.05m,
                            Factory = "George Allen & Unwin",
                            Image = "hobbit.jpg",
                            Name = "The Hobbit",
                            Price = 14.99m,
                            Quantity = 200L,
                            ShortDesc = "Fantasy Adventure",
                            Sold = 20L
                        },
                        new
                        {
                            Id = 3L,
                            Author = "Dan Brown",
                            DetailDesc = "A thriller involving cryptic codes and a murder mystery",
                            Discount = 0.15m,
                            Factory = "Doubleday",
                            Image = "davinci.jpg",
                            Name = "The Da Vinci Code",
                            Price = 12.99m,
                            Quantity = 150L,
                            ShortDesc = "Mystery Thriller",
                            Sold = 15L
                        },
                        new
                        {
                            Id = 4L,
                            Author = "Michelle Obama",
                            DetailDesc = "A memoir by Michelle Obama",
                            Discount = 0.20m,
                            Factory = "Crown Publishing",
                            Image = "becoming.jpg",
                            Name = "Becoming",
                            Price = 17.99m,
                            Quantity = 120L,
                            ShortDesc = "Inspiring Memoir",
                            Sold = 8L
                        },
                        new
                        {
                            Id = 5L,
                            Author = "James Clear",
                            DetailDesc = "A book about building good habits",
                            Discount = 0.05m,
                            Factory = "Penguin Random House",
                            Image = "atomic_habits.jpg",
                            Name = "Atomic Habits",
                            Price = 11.99m,
                            Quantity = 300L,
                            ShortDesc = "Self-Improvement Guide",
                            Sold = 40L
                        },
                        new
                        {
                            Id = 6L,
                            Author = "J.K. Rowling",
                            DetailDesc = "A young wizard's adventure",
                            Discount = 0.08m,
                            Factory = "Bloomsbury",
                            Image = "hp_sorcerer.jpg",
                            Name = "Harry Potter and the Sorcerer's Stone",
                            Price = 16.99m,
                            Quantity = 250L,
                            ShortDesc = "Fantasy Magic",
                            Sold = 60L
                        },
                        new
                        {
                            Id = 7L,
                            Author = "George Orwell",
                            DetailDesc = "A dystopian novel set in a totalitarian society",
                            Discount = 0.12m,
                            Factory = "Secker & Warburg",
                            Image = "1984.jpg",
                            Name = "1984",
                            Price = 13.99m,
                            Quantity = 100L,
                            ShortDesc = "Classic Dystopia",
                            Sold = 50L
                        },
                        new
                        {
                            Id = 8L,
                            Author = "Tara Westover",
                            DetailDesc = "A memoir about the power of education",
                            Discount = 0.15m,
                            Factory = "Random House",
                            Image = "educated.jpg",
                            Name = "Educated",
                            Price = 18.99m,
                            Quantity = 80L,
                            ShortDesc = "Memoir",
                            Sold = 7L
                        },
                        new
                        {
                            Id = 9L,
                            Author = "J.D. Salinger",
                            DetailDesc = "A classic novel about teenage rebellion",
                            Discount = 0.10m,
                            Factory = "Little, Brown",
                            Image = "catcher_rye.jpg",
                            Name = "The Catcher in the Rye",
                            Price = 10.99m,
                            Quantity = 170L,
                            ShortDesc = "Classic Novel",
                            Sold = 30L
                        },
                        new
                        {
                            Id = 10L,
                            Author = "Yuval Noah Harari",
                            DetailDesc = "A brief history of humankind",
                            Discount = 0.10m,
                            Factory = "Harvill Secker",
                            Image = "sapiens.jpg",
                            Name = "Sapiens",
                            Price = 22.99m,
                            Quantity = 90L,
                            ShortDesc = "History of Humanity",
                            Sold = 25L
                        });
                });

            modelBuilder.Entity("BookStore.Domain.Entities.Cart", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<int>("Sum")
                        .HasColumnType("int")
                        .HasColumnName("sum");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("PK__carts__3213E83F79F76684");

                    b.HasIndex("UserId");

                    b.ToTable("carts", (string)null);
                });

            modelBuilder.Entity("BookStore.Domain.Entities.CartDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("BookId")
                        .HasColumnType("bigint")
                        .HasColumnName("book_id");

                    b.Property<long>("CartId")
                        .HasColumnType("bigint")
                        .HasColumnName("cart_id");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("price");

                    b.Property<long>("Quantity")
                        .HasColumnType("bigint")
                        .HasColumnName("quantity");

                    b.HasKey("Id")
                        .HasName("PK__cart_det__3213E83F9AEF95B3");

                    b.HasIndex("BookId");

                    b.HasIndex("CartId");

                    b.ToTable("cart_detail", (string)null);
                });

            modelBuilder.Entity("BookStore.Domain.Entities.Category", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PK__categori__3213E83F7AC34821");

                    b.ToTable("categories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Description = "Books about futuristic science and technology",
                            Name = "Science Fiction"
                        },
                        new
                        {
                            Id = 2L,
                            Description = "Books that contain magical elements",
                            Name = "Fantasy"
                        },
                        new
                        {
                            Id = 3L,
                            Description = "Books that involve solving a crime or uncovering secrets",
                            Name = "Mystery"
                        },
                        new
                        {
                            Id = 4L,
                            Description = "Books about people's life stories",
                            Name = "Biography"
                        },
                        new
                        {
                            Id = 5L,
                            Description = "Books aimed at personal development",
                            Name = "Self-Help"
                        });
                });

            modelBuilder.Entity("BookStore.Domain.Entities.Order", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime?>("OrderDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("order_date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("total_price");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("PK__orders__3213E83FBB119652");

                    b.HasIndex("UserId");

                    b.ToTable("orders", (string)null);
                });

            modelBuilder.Entity("BookStore.Domain.Entities.OrderDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("BookId")
                        .HasColumnType("bigint")
                        .HasColumnName("book_id");

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint")
                        .HasColumnName("order_id");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("price");

                    b.Property<long>("Quantity")
                        .HasColumnType("bigint")
                        .HasColumnName("quantity");

                    b.HasKey("Id")
                        .HasName("PK__order_de__3213E83F013C6BDF");

                    b.HasIndex("BookId");

                    b.HasIndex("OrderId");

                    b.ToTable("order_detail", (string)null);
                });

            modelBuilder.Entity("BookStore.Domain.Entities.Role", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PK__roles__3213E83F593785AB");

                    b.ToTable("roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Description = "Administrator role",
                            Name = "ADMIN"
                        },
                        new
                        {
                            Id = 2L,
                            Description = "User role",
                            Name = "USER"
                        });
                });

            modelBuilder.Entity("BookStore.Domain.Entities.StockImport", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime?>("ImportDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("import_date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long>("SupplierId")
                        .HasColumnType("bigint")
                        .HasColumnName("supplier_id");

                    b.Property<decimal>("TotalCost")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("total_cost");

                    b.HasKey("Id")
                        .HasName("PK__stock_im__3213E83FE6AFC046");

                    b.HasIndex("SupplierId");

                    b.ToTable("stock_imports", (string)null);
                });

            modelBuilder.Entity("BookStore.Domain.Entities.StockImportDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("BookId")
                        .HasColumnType("bigint")
                        .HasColumnName("book_id");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("price");

                    b.Property<long>("Quantity")
                        .HasColumnType("bigint")
                        .HasColumnName("quantity");

                    b.Property<long>("StockImportId")
                        .HasColumnType("bigint")
                        .HasColumnName("stock_import_id");

                    b.HasKey("Id")
                        .HasName("PK__stock_im__3213E83F39FB200D");

                    b.HasIndex("BookId");

                    b.HasIndex("StockImportId");

                    b.ToTable("stock_import_details", (string)null);
                });

            modelBuilder.Entity("BookStore.Domain.Entities.Supplier", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("address");

                    b.Property<string>("ContactEmail")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("contact_email");

                    b.Property<string>("ContactPhone")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("contact_phone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PK__supplier__3213E83F033D9E5E");

                    b.ToTable("suppliers", (string)null);
                });

            modelBuilder.Entity("BookStore.Domain.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("address");

                    b.Property<string>("Avatar")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("avatar");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("email");

                    b.Property<string>("FullName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("full_name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("password");

                    b.Property<string>("Phone")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("phone");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint")
                        .HasColumnName("role_id");

                    b.HasKey("Id")
                        .HasName("PK__users__3213E83F945A9790");

                    b.HasIndex("RoleId");

                    b.ToTable("users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Address = "123 Admin St",
                            Avatar = "admin.png",
                            Email = "admin@bookstore.com",
                            FullName = "Admin User",
                            Password = "$2a$12$xkaiydj8kcvoyFJdTL.5ou.rJYRERXSymin4pTLikQ6dA3F8uJPxK",
                            Phone = "123456789",
                            RoleId = 1L
                        });
                });

            modelBuilder.Entity("BookCategory", b =>
                {
                    b.HasOne("BookStore.Domain.Entities.Book", null)
                        .WithMany()
                        .HasForeignKey("BookId")
                        .IsRequired()
                        .HasConstraintName("FK__book_cate__book___6383C8BA");

                    b.HasOne("BookStore.Domain.Entities.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .IsRequired()
                        .HasConstraintName("FK__book_cate__categ__6477ECF3");
                });

            modelBuilder.Entity("BookStore.Domain.Entities.Cart", b =>
                {
                    b.HasOne("BookStore.Domain.Entities.User", "User")
                        .WithMany("Carts")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__carts__user_id__5535A963");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BookStore.Domain.Entities.CartDetail", b =>
                {
                    b.HasOne("BookStore.Domain.Entities.Book", "Book")
                        .WithMany("CartDetails")
                        .HasForeignKey("BookId")
                        .IsRequired()
                        .HasConstraintName("FK__cart_deta__book___59063A47");

                    b.HasOne("BookStore.Domain.Entities.Cart", "Cart")
                        .WithMany("CartDetails")
                        .HasForeignKey("CartId")
                        .IsRequired()
                        .HasConstraintName("FK__cart_deta__cart___5812160E");

                    b.Navigation("Book");

                    b.Navigation("Cart");
                });

            modelBuilder.Entity("BookStore.Domain.Entities.Order", b =>
                {
                    b.HasOne("BookStore.Domain.Entities.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__orders__user_id__52593CB8");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BookStore.Domain.Entities.OrderDetail", b =>
                {
                    b.HasOne("BookStore.Domain.Entities.Book", "Book")
                        .WithMany("OrderDetails")
                        .HasForeignKey("BookId")
                        .IsRequired()
                        .HasConstraintName("FK__order_det__book___5CD6CB2B");

                    b.HasOne("BookStore.Domain.Entities.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .IsRequired()
                        .HasConstraintName("FK__order_det__order__5BE2A6F2");

                    b.Navigation("Book");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("BookStore.Domain.Entities.StockImport", b =>
                {
                    b.HasOne("BookStore.Domain.Entities.Supplier", "Supplier")
                        .WithMany("StockImports")
                        .HasForeignKey("SupplierId")
                        .IsRequired()
                        .HasConstraintName("FK__stock_imp__suppl__68487DD7");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("BookStore.Domain.Entities.StockImportDetail", b =>
                {
                    b.HasOne("BookStore.Domain.Entities.Book", "Book")
                        .WithMany("StockImportDetails")
                        .HasForeignKey("BookId")
                        .IsRequired()
                        .HasConstraintName("FK__stock_imp__book___6C190EBB");

                    b.HasOne("BookStore.Domain.Entities.StockImport", "StockImport")
                        .WithMany("StockImportDetails")
                        .HasForeignKey("StockImportId")
                        .IsRequired()
                        .HasConstraintName("FK__stock_imp__stock__6B24EA82");

                    b.Navigation("Book");

                    b.Navigation("StockImport");
                });

            modelBuilder.Entity("BookStore.Domain.Entities.User", b =>
                {
                    b.HasOne("BookStore.Domain.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("FK__users__role_id__4BAC3F29");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("BookStore.Domain.Entities.Book", b =>
                {
                    b.Navigation("CartDetails");

                    b.Navigation("OrderDetails");

                    b.Navigation("StockImportDetails");
                });

            modelBuilder.Entity("BookStore.Domain.Entities.Cart", b =>
                {
                    b.Navigation("CartDetails");
                });

            modelBuilder.Entity("BookStore.Domain.Entities.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("BookStore.Domain.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("BookStore.Domain.Entities.StockImport", b =>
                {
                    b.Navigation("StockImportDetails");
                });

            modelBuilder.Entity("BookStore.Domain.Entities.Supplier", b =>
                {
                    b.Navigation("StockImports");
                });

            modelBuilder.Entity("BookStore.Domain.Entities.User", b =>
                {
                    b.Navigation("Carts");

                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
